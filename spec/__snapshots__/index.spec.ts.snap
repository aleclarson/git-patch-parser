// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`can parse a deleted file 1`] = `
Object {
  "changes": Array [
    Object {
      "diff": Array [
        Object {
          "inputRange": Object {
            "length": 8,
            "start": 1,
          },
          "lines": Array [
            Object {
              "prefix": "-",
              "text": "{",
            },
            Object {
              "prefix": "-",
              "text": "  \\"bracketSpacing\\": true,",
            },
            Object {
              "prefix": "-",
              "text": "  \\"jsxBracketSameLine\\": true,",
            },
            Object {
              "prefix": "-",
              "text": "  \\"singleQuote\\": false,",
            },
            Object {
              "prefix": "-",
              "text": "  \\"semi\\": true,",
            },
            Object {
              "prefix": "-",
              "text": "  \\"trailingComma\\": \\"es5\\",",
            },
            Object {
              "prefix": "-",
              "text": "  \\"arrowParens\\": \\"always\\"",
            },
            Object {
              "prefix": "-",
              "text": "}",
            },
          ],
          "outputRange": Object {
            "length": 0,
            "start": 0,
          },
        },
      ],
      "file": ".prettierrc",
      "type": "delete",
    },
  ],
  "message": "tmp",
  "sha": "e6e150aea92b5eb626b611a54505fcfb74e1a7d8",
}
`;

exports[`can parse a renamed file 1`] = `
Object {
  "changes": Array [
    Object {
      "dest": ".bab",
      "file": ".babelrc",
      "type": "rename",
    },
  ],
  "message": "tmp",
  "sha": "8046002a8c1b736cde7090f6af14e06420a5729d",
}
`;

exports[`can parse an added file 1`] = `
Object {
  "changes": Array [
    Object {
      "file": ".babelrc",
      "text": "{
  \\"presets\\": [\\"@babel/env\\", \\"@babel/typescript\\"]
}
",
      "type": "add",
    },
  ],
  "message": "boop",
  "sha": "da991f76c33de0a0e3b4c824a67496d01e01ab1e",
}
`;

exports[`can parse multiple diffs for one file 1`] = `
Object {
  "changes": Array [
    Object {
      "diff": Array [
        Object {
          "inputRange": Object {
            "length": 14,
            "start": 12,
          },
          "lines": Array [
            Object {
              "prefix": " ",
              "text": " */",
            },
            Object {
              "prefix": " ",
              "text": "'use strict';",
            },
            Object {
              "prefix": " ",
              "text": "",
            },
            Object {
              "prefix": "-",
              "text": "const ColorPropType = require('ColorPropType');",
            },
            Object {
              "prefix": "-",
              "text": "const EdgeInsetsPropType = require('EdgeInsetsPropType');",
            },
            Object {
              "prefix": " ",
              "text": "const NativeMethodsMixin = require('NativeMethodsMixin');",
            },
            Object {
              "prefix": " ",
              "text": "const React = require('React');",
            },
            Object {
              "prefix": "-",
              "text": "const PropTypes = require('prop-types');",
            },
            Object {
              "prefix": " ",
              "text": "const ReactNativeViewAttributes = require('ReactNativeViewAttributes');",
            },
            Object {
              "prefix": "-",
              "text": "const StyleSheetPropType = require('StyleSheetPropType');",
            },
            Object {
              "prefix": "-",
              "text": "const TextStylePropTypes = require('TextStylePropTypes');",
            },
            Object {
              "prefix": "+",
              "text": "const TextPropTypes = require('TextPropTypes');",
            },
            Object {
              "prefix": " ",
              "text": "const Touchable = require('Touchable');",
            },
            Object {
              "prefix": " ",
              "text": "const UIManager = require('UIManager');",
            },
            Object {
              "prefix": " ",
              "text": "",
            },
          ],
          "outputRange": Object {
            "length": 10,
            "start": 12,
          },
        },
        Object {
          "inputRange": Object {
            "length": 8,
            "start": 27,
          },
          "lines": Array [
            Object {
              "prefix": " ",
              "text": "const processColor = require('processColor');",
            },
            Object {
              "prefix": " ",
              "text": "const {ViewContextTypes} = require('ViewContext');",
            },
            Object {
              "prefix": " ",
              "text": "",
            },
            Object {
              "prefix": "-",
              "text": "const stylePropType = StyleSheetPropType(TextStylePropTypes);",
            },
            Object {
              "prefix": "-",
              "text": "",
            },
            Object {
              "prefix": " ",
              "text": "const viewConfig = {",
            },
            Object {
              "prefix": " ",
              "text": "  validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {",
            },
            Object {
              "prefix": " ",
              "text": "    isHighlighted: true,",
            },
          ],
          "outputRange": Object {
            "length": 6,
            "start": 23,
          },
        },
        Object {
          "inputRange": Object {
            "length": 113,
            "start": 55,
          },
          "lines": Array [
            Object {
              "prefix": " ",
              "text": "",
            },
            Object {
              "prefix": " ",
              "text": "const Text = createReactClass({",
            },
            Object {
              "prefix": " ",
              "text": "  displayName: 'Text',",
            },
            Object {
              "prefix": "-",
              "text": "  propTypes: {",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * When \`numberOfLines\` is set, this prop defines how text will be",
            },
            Object {
              "prefix": "-",
              "text": "     * truncated.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#ellipsizemode",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * Used to truncate the text with an ellipsis.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#numberoflines",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    numberOfLines: PropTypes.number,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * Set text break strategy on Android.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#textbreakstrategy",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * Invoked on mount and layout changes.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#onlayout",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    onLayout: PropTypes.func,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * This function is called on press.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#onpress",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    onPress: PropTypes.func,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * This function is called on long press.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#onlongpress",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    onLongPress: PropTypes.func,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * Defines how far your touch may move off of the button, before",
            },
            Object {
              "prefix": "-",
              "text": "     * deactivating the button.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#pressretentionoffset",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    pressRetentionOffset: EdgeInsetsPropType,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * Lets the user select text.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#selectable",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    selectable: PropTypes.bool,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * The highlight color of the text.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#selectioncolor",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    selectionColor: ColorPropType,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * When \`true\`, no visual change is made when text is pressed down.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#supperhighlighting",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    suppressHighlighting: PropTypes.bool,",
            },
            Object {
              "prefix": "-",
              "text": "    style: stylePropType,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * Used to locate this view in end-to-end tests.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#testid",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    testID: PropTypes.string,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * Used to locate this view from native code.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#nativeid",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    nativeID: PropTypes.string,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * Whether fonts should scale to respect Text Size accessibility settings.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#allowfontscaling",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    allowFontScaling: PropTypes.bool,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * Indicates whether the view is an accessibility element.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#accessible",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    accessible: PropTypes.bool,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * Whether font should be scaled down automatically.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#adjustsfontsizetofit",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    adjustsFontSizeToFit: PropTypes.bool,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * Smallest possible scale a font can reach.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#minimumfontscale",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    minimumFontScale: PropTypes.number,",
            },
            Object {
              "prefix": "-",
              "text": "    /**",
            },
            Object {
              "prefix": "-",
              "text": "     * Specifies the disabled state of the text view for testing purposes.",
            },
            Object {
              "prefix": "-",
              "text": "     *",
            },
            Object {
              "prefix": "-",
              "text": "     * See https://facebook.github.io/react-native/docs/text.html#disabled",
            },
            Object {
              "prefix": "-",
              "text": "     */",
            },
            Object {
              "prefix": "-",
              "text": "    disabled: PropTypes.bool,",
            },
            Object {
              "prefix": "-",
              "text": "  },",
            },
            Object {
              "prefix": "+",
              "text": "  propTypes: TextPropTypes,",
            },
            Object {
              "prefix": " ",
              "text": "  getDefaultProps(): Object {",
            },
            Object {
              "prefix": " ",
              "text": "    return {",
            },
            Object {
              "prefix": " ",
              "text": "      accessible: true,",
            },
          ],
          "outputRange": Object {
            "length": 7,
            "start": 49,
          },
        },
      ],
      "file": "Libraries/Text/Text.js",
      "type": "change",
    },
    Object {
      "file": "Libraries/Text/TextPropTypes.js",
      "text": "/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @providesModule TextPropTypes
 * @flow
 * @format
 */

'use strict';

const ColorPropType = require('ColorPropType');
const EdgeInsetsPropType = require('EdgeInsetsPropType');
const PropTypes = require('prop-types');
const StyleSheetPropType = require('StyleSheetPropType');
const TextStylePropTypes = require('TextStylePropTypes');

const stylePropType = StyleSheetPropType(TextStylePropTypes);

module.exports = {
  /**
   * When \`numberOfLines\` is set, this prop defines how text will be
   * truncated.
   *
   * See https://facebook.github.io/react-native/docs/text.html#ellipsizemode
   */
  ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),
  /**
   * Used to truncate the text with an ellipsis.
   *
   * See https://facebook.github.io/react-native/docs/text.html#numberoflines
   */
  numberOfLines: PropTypes.number,
  /**
   * Set text break strategy on Android.
   *
   * See https://facebook.github.io/react-native/docs/text.html#textbreakstrategy
   */
  textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),
  /**
   * Invoked on mount and layout changes.
   *
   * See https://facebook.github.io/react-native/docs/text.html#onlayout
   */
  onLayout: PropTypes.func,
  /**
   * This function is called on press.
   *
   * See https://facebook.github.io/react-native/docs/text.html#onpress
   */
  onPress: PropTypes.func,
  /**
   * This function is called on long press.
   *
   * See https://facebook.github.io/react-native/docs/text.html#onlongpress
   */
  onLongPress: PropTypes.func,
  /**
   * Defines how far your touch may move off of the button, before
   * deactivating the button.
   *
   * See https://facebook.github.io/react-native/docs/text.html#pressretentionoffset
   */
  pressRetentionOffset: EdgeInsetsPropType,
  /**
   * Lets the user select text.
   *
   * See https://facebook.github.io/react-native/docs/text.html#selectable
   */
  selectable: PropTypes.bool,
  /**
   * The highlight color of the text.
   *
   * See https://facebook.github.io/react-native/docs/text.html#selectioncolor
   */
  selectionColor: ColorPropType,
  /**
   * When \`true\`, no visual change is made when text is pressed down.
   *
   * See https://facebook.github.io/react-native/docs/text.html#supperhighlighting
   */
  suppressHighlighting: PropTypes.bool,
  style: stylePropType,
  /**
   * Used to locate this view in end-to-end tests.
   *
   * See https://facebook.github.io/react-native/docs/text.html#testid
   */
  testID: PropTypes.string,
  /**
   * Used to locate this view from native code.
   *
   * See https://facebook.github.io/react-native/docs/text.html#nativeid
   */
  nativeID: PropTypes.string,
  /**
   * Whether fonts should scale to respect Text Size accessibility settings.
   *
   * See https://facebook.github.io/react-native/docs/text.html#allowfontscaling
   */
  allowFontScaling: PropTypes.bool,
  /**
   * Indicates whether the view is an accessibility element.
   *
   * See https://facebook.github.io/react-native/docs/text.html#accessible
   */
  accessible: PropTypes.bool,
  /**
   * Whether font should be scaled down automatically.
   *
   * See https://facebook.github.io/react-native/docs/text.html#adjustsfontsizetofit
   */
  adjustsFontSizeToFit: PropTypes.bool,
  /**
   * Smallest possible scale a font can reach.
   *
   * See https://facebook.github.io/react-native/docs/text.html#minimumfontscale
   */
  minimumFontScale: PropTypes.number,
  /**
   * Specifies the disabled state of the text view for testing purposes.
   *
   * See https://facebook.github.io/react-native/docs/text.html#disabled
   */
  disabled: PropTypes.bool,
};
",
      "type": "add",
    },
  ],
  "message": "Move Text PropTypes to it's own file

Reviewed By: fkgozali

Differential Revision: D7226404

fbshipit-source-id: b5637dee9a4f10daf0682e46f1ec8920ea03ae33",
  "sha": "cd8128b2eccf6898cdf798a1e1be1f7a5762a0d4",
}
`;
